import java.util.Stack;

class Solution {
    public boolean isValid(String s) {
        // Stack to keep track of opening brackets
        Stack<Character> st = new Stack<>();

        // Iterate through each character in the string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If it's an opening bracket, push onto the stack
            if (ch == '(' || ch == '{' || ch == '[') {
                st.push(ch);
            } else {
                // If it's a closing bracket, check for validity
                if (st.isEmpty()) {
                    return false; // No matching opening bracket
                }

                // Check for matching pairs
                if ((st.peek() == '(' && ch == ')') ||
                    (st.peek() == '{' && ch == '}') ||
                    (st.peek() == '[' && ch == ']')) {
                    st.pop(); // Valid match found, pop from stack
                } else {
                    return false; // Mismatched closing bracket
                }
            }
        }

        // If the stack is empty, all brackets were matched correctly
        return st.isEmpty();
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test cases
        String test1 = "()";
        String test2 = "()[]{}";
        String test3 = "(]";
        String test4 = "([)]";
        String test5 = "{[]}";

        System.out.println(solution.isValid(test1)); // true
        System.out.println(solution.isValid(test2)); // true
        System.out.println(solution.isValid(test3)); // false
        System.out.println(solution.isValid(test4)); // false
        System.out.println(solution.isValid(test5)); // true
    }
}
